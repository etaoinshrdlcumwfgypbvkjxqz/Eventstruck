//////////////////////////////////////////////////
// Gradle Build Script
//////////////////////////////////////////////////

import groovy.json.JsonBuilder

import java.util.function.BiFunction

buildscript {
    repositories {
        jcenter()
        maven {
            name = "Minecraft Forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
    //Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
}

plugins {
    id "java"
}
apply plugin: "net.minecraftforge.gradle.forge"
apply from: "$rootDir${File.separator}gradle${File.separator}ext.properties.gradle"

loadExt "$rootDir${File.separator}buildSrc${File.separator}ext.properties"

ext {
    pascalName = name.capitalize()

    url = "https://etaoinshrdlcumwfgypbvkjxqz.github.io/Eventstruck/"
    updateUrl = url
    updateJSON = ""
    authorList = ["William So"]
    credits = "Made by ${authorList.first()}."
    logoFile = ""
    screenshots = []
    requiredMods = []
    dependencies_ = []
    dependants = []

    certificateFingerprint = ""
}

version = "1.0.0"
group = "com.etaoinshrdlcumwfgypbvkjxqz.games.mods.minecraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = pascalName
description = "This mod adds events to make Minecraft more interesting!"

// Need this here so eclipse task generates correctly.
sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = minecraftVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = minecraftMappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    /*
    'compile' is superseded by 'implementation'.
    'runtime' is superseded by 'runtimeOnly'.
    'testCompile' is superseded by 'testImplementation'.
    'testRuntime' is superseded by 'testRuntimeOnly'.
     */
}

sourceSets {
    main
    test
    api
}

static Map<String, Object> processReplaceKeys(Map<String, Object> map) {
    Map<String, Object> ret = [:]
    map.each { entry -> ret."\${$entry.key}" = entry.value }
    return ret
}
sourceMainJava {
    include "${pascalName}.java"

    replace processReplaceKeys(["modid": project.name,
                                "mcversion": project.minecraft.version,
                                "certificateFingerprint": certificateFingerprint])
}

static <E> String processResourcesList(List<E> list) {
    if (list.empty) return ""
    else list.toListString().replace("[", "\"").replace("]", "\"").replace(", ", "\", \"")
}
processResources {
    // this will ensure that this task is redone when the variables change.
    inputs.property "modid", project.name
    inputs.property "name", pascalName
    inputs.property "description", description
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "url", url
    inputs.property "updateUrl", updateUrl
    inputs.property "updateJSON", updateJSON
    inputs.property "authorList", processResourcesList(authorList as List<String>)
    inputs.property "credits", credits
    inputs.property "logoFile", logoFile
    inputs.property "screenshots", processResourcesList(screenshots as List<String>)
    inputs.property "requiredMods", processResourcesList(requiredMods as List<String>)
    inputs.property "dependencies", processResourcesList(dependencies_ as List<String>)
    inputs.property "dependants", processResourcesList(dependants as List<String>)

    // replace stuff in the to-be-processed files, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info", "pack.mcmeta"

        // replace variables
        expand "modid": inputs.properties.modid,
                "name": inputs.properties.name,
                "description": inputs.properties.description,
                "version": inputs.properties.version,
                "mcversion": inputs.properties.mcversion,
                "url": inputs.properties.url,
                "updateUrl": inputs.properties.updateUrl,
                "updateJSON": inputs.properties.updateJSON,
                "authorList": inputs.properties.authorList,
                "credits": inputs.properties.credits,
                "logoFile": inputs.properties.logoFile,
                "screenshots": inputs.properties.screenshots,
                "requiredMods": inputs.properties.requiredMods,
                "dependencies": inputs.properties.dependencies,
                "dependants": inputs.properties.dependants
    }

    // copy everything else except the processed files
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info", "pack.mcmeta"
    }
}
processTestResources {
    inputs.property "modid", project.name
    inputs.property "name", pascalName
    inputs.property "description", description
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "url", url
    inputs.property "updateUrl", updateUrl
    inputs.property "updateJSON", updateJSON
    inputs.property "authorList", processResourcesList(authorList as List<String>)
    inputs.property "credits", credits
    inputs.property "logoFile", logoFile
    inputs.property "screenshots", processResourcesList(screenshots as List<String>)
    inputs.property "requiredMods", processResourcesList(requiredMods as List<String>)
    inputs.property "dependencies", processResourcesList(dependencies_ as List<String>)
    inputs.property "dependants", processResourcesList(dependants as List<String>)

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info", "pack.mcmeta"

        expand "modid": inputs.properties.modid,
                "name": inputs.properties.name,
                "description": inputs.properties.description,
                "version": inputs.properties.version,
                "mcversion": inputs.properties.mcversion,
                "url": inputs.properties.url,
                "updateUrl": inputs.properties.updateUrl,
                "updateJSON": inputs.properties.updateJSON,
                "authorList": inputs.properties.authorList,
                "credits": inputs.properties.credits,
                "logoFile": inputs.properties.logoFile,
                "screenshots": inputs.properties.screenshots,
                "requiredMods": inputs.properties.requiredMods,
                "dependencies": inputs.properties.dependencies,
                "dependants": inputs.properties.dependants
    }

    from sourceSets.test.resources.srcDirs
}
processApiResources {
    from sourceSets.api.resources.srcDirs
}

task saveCurrentGoodSettings(group: "build", description: "Saves current good settings to '$lastGoodSettingsFile'.") {
    outputs.file lastGoodSettingsFile

    doLast {
        Map json = [
                gradle: [ distributionUrl: (tasks.wrapper as Wrapper).distributionUrl ],
                dependencies: [],
                minecraft: [
                        version: minecraftVersion,
                        mappings: minecraftMappings
                ]
        ]
        List<Map<String, String>> jsonDependencies = json.dependencies
        configurations.each { configuration -> configuration.allDependencies.each { dependency -> if (dependency.name != "unspecified") jsonDependencies.add([configuration: configuration.name, group: dependency.group, name: dependency.name, version: dependency.version]) } }
        String jsonText = new JsonBuilder(json).toPrettyString()

        File file = file lastGoodSettingsFile
        if (!file.exists()) {
            file.parentFile.mkdirs()
            file.createNewFile()
        }

        file.write jsonText
        logger.quiet "'$lastGoodSettingsFile':"
        logger.quiet jsonText
    }
}
tasks.build.finalizedBy "saveCurrentGoodSettings"

storeExt()
