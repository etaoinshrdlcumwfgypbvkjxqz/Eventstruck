import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import java.nio.channels.Channels
import java.text.SimpleDateFormat
import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
        maven {
            name = "minecraftforge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
    //Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

    ext {
        sectionHeaderNamed = "=========================%s=========================${System.lineSeparator()}"
        sectionFooter = "==================================================${System.lineSeparator()}"
        minecraftForgeFilesFile = "$buildDir${File.separator}MinecraftForgeFiles.html"
        lastGoodSettingsFile = "$buildDir${File.separator}LastGoodSettings.json"
        minecraftVersion = "latest"
        minecraftMappings = "latest"
    }

    if (project.hasProperty("applyLastGoodSettings") && Boolean.parseBoolean(applyLastGoodSettings as String)) {
        logger.quiet("Applying last good settings from '$lastGoodSettingsFile'...")
        File file = file(lastGoodSettingsFile)
        if (!file.exists()) throw new FileNotFoundException("'$lastGoodSettingsFile' not found: obtain '$lastGoodSettingsFile' from the repository.")
        String text = file.text
        logger.quiet("'$lastGoodSettingsFile':")
        logger.quiet(text)
        Object json = new JsonSlurper().parseText(text)

        gradle.projectsLoaded { json.dependencies.each { dependency -> dependencies.add(dependency.configuration as String, "$dependency.group:$dependency.name:$dependency.version", { force = true }) } }
        project.ext.minecraftVersion = json.minecraft.version
        project.ext.minecraftMappings = json.minecraft.mappings
    } else {
        if (minecraftVersion == "latest") {
            new FileOutputStream(minecraftForgeFilesFile.toString()).channel.transferFrom(Channels.newChannel(new URL("https://files.minecraftforge.net/maven/net/minecraftforge/forge/").openStream()), 0, Long.MAX_VALUE)
            project.ext.minecraftVersion = file(minecraftForgeFilesFile).text.find(Pattern.compile("<i class=\"fa promo-latest\"><\\/i>[a-zA-Z ]+<br>\n[ ]+<small>[0-9. -]+<")).find(Pattern.compile("[0-9][0-9. -]+")).replaceAll(" ", "")
        }

        if (minecraftMappings == "latest") project.ext.minecraftMappings = "snapshot_" + new SimpleDateFormat("yyyyMMdd").format(Calendar.instance.time.previous())
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'

version = "1.0.0"
group = "com.etaoinshrdlcumwfgypbvkjxqz.games.mods.minecraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = name

// Need this here so eclipse task generates correctly.
sourceCompatibility = 1.8
targetCompatibility = 11
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 11
}

minecraft {
    version = minecraftVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = minecraftMappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

sourceSets {
    main
    test
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task saveCurrentGoodSettings(group: "build", description: "Saves current good settings to '$lastGoodSettingsFile'") {
    doLast {
        File file = file(lastGoodSettingsFile)
        if (file.exists()) file.delete()
        else file.parentFile.mkdirs()
        file.createNewFile()

        Map json = [
                dependencies: [],
                minecraft: [
                        version: minecraftVersion,
                        mappings: minecraftMappings
                ]
        ]
        configurations.each { configuration -> configuration.allDependencies.each { dependency -> if (dependency.name != "unspecified") json.dependencies.add([configuration: configuration.name, group: dependency.group, name: dependency.name, version: dependency.version]) } }

        file.write(new JsonBuilder(json).toPrettyString())

        tasks.printCurrentGoodSettings.enabled = true
    }
}
task printCurrentGoodSettings(group: "build", description: "Prints current good settings") {
    enabled = false
    doLast {
        File file = file(project.ext.lastGoodSettingsFile)
        if (!file.exists()) throw new FileNotFoundException("'$lastGoodSettingsFile' not found: run '$tasks.saveCurrentGoodSettings.name' before running '$name'.".toString())
        logger.quiet("'$lastGoodSettingsFile':".toString())
        logger.quiet(file.text)
    }
}
tasks.saveCurrentGoodSettings.finalizedBy("printCurrentGoodSettings")
tasks.build.finalizedBy("saveCurrentGoodSettings")
