//////////////////////////////////////////////////
// Gradle Build Script
//////////////////////////////////////////////////

import groovy.json.JsonBuilder

buildscript {
    repositories {
        jcenter()
        maven {
            name = "Minecraft Forge"
            url = 'https://files.minecraftforge.net/maven'
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
    //Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
}

plugins {
    id "java"
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply from: "$rootDir${File.separator}gradle${File.separator}ext${File.separator}loadExt.gradle"

loadExt("$rootDir${File.separator}buildSrc${File.separator}ext.properties")

ext {
    url = "https://etaoinshrdlcumwfgypbvkjxqz.github.io/Eventstruck/"
    updateUrl = url
    authorList = ["William So"]
    credits = "Made by ${authorList.first()}."
    logoFile = ""
    screenshots = []
    dependenciesList = []
}

version = "1.0.0"
group = "com.etaoinshrdlcumwfgypbvkjxqz.games.mods.minecraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = name
description = "This mod adds events to make Minecraft more interesting!"

// Need this here so eclipse task generates correctly.
sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

minecraft {
    version = minecraftVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = minecraftMappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

sourceSets {
    main
    test
    api
}

static <E> String processResourcesList(List<E> list) {
    if (list.empty) return ""
    else list.toListString().replace("[", "\"").replace("]", "\"").replace(", ", "\", \"")
}
processResources {
    // this will ensure that this task is redone when the variables change.
    inputs.property "modid", name
    inputs.property "name", projectDir.name
    inputs.property "description", description
    inputs.property 'version', version
    inputs.property 'mcversion', project.minecraft.version
    inputs.property "url", url
    inputs.property "updateUrl", updateUrl
    inputs.property "authorList", authorList
    inputs.property "credits", credits
    inputs.property "logoFile", logoFile
    inputs.property "screenshots", screenshots
    inputs.property "dependencies", dependenciesList

    // replace stuff in the to-be-processed files, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info', "pack.mcmeta"

        // replace variables
        expand "modid": inputs.properties.get("modid"),
                "name": inputs.properties.get("name"),
                "description": inputs.properties.get("description"),
                'version': inputs.properties.get("version"),
                'mcversion': inputs.properties.get("mcversion"),
                "url": inputs.properties.get("url"),
                "updateUrl": inputs.properties.get("updateUrl"),
                "authorList": processResourcesList(inputs.properties.get("authorList") as List<String>),
                "credits": inputs.properties.get("credits"),
                "logoFile": inputs.properties.get("logoFile"),
                "screenshots": processResourcesList(inputs.properties.get("screenshots") as List<String>),
                "dependencies": processResourcesList(inputs.properties.get("dependencies") as List<String>)
    }

    // copy everything else except the processed files
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info', "pack.mcmeta"
    }
}
processTestResources {
    inputs.property "modid", name
    inputs.property "name", projectDir.name
    inputs.property "description", description
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "url", url
    inputs.property "updateUrl", updateUrl
    inputs.property "authorList", authorList
    inputs.property "credits", credits
    inputs.property "logoFile", logoFile
    inputs.property "screenshots", screenshots
    inputs.property "dependencies", dependenciesList
    
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info", "pack.mcmeta"

        // replace variables
        expand "modid": inputs.properties.get("modid"),
                "name": inputs.properties.get("name"),
                "description": inputs.properties.get("description"),
                "version": inputs.properties.get("version"),
                "mcversion": inputs.properties.get("mcversion"),
                "url": inputs.properties.get("url"),
                "updateUrl": inputs.properties.get("updateUrl"),
                "authorList": processResourcesList(inputs.properties.get("authorList") as List<String>),
                "credits": inputs.properties.get("credits"),
                "logoFile": inputs.properties.get("logoFile"),
                "screenshots": processResourcesList(inputs.properties.get("screenshots") as List<String>),
                "dependencies": processResourcesList(inputs.properties.get("dependencies") as List<String>)
    }

    from sourceSets.test.resources.srcDirs
}
processApiResources {
    from sourceSets.api.resources.srcDirs
}

task saveCurrentGoodSettings(group: "build", description: "Saves current good settings to '$lastGoodSettingsFile'") {
    // outputs.

    doLast {
        File file = file(lastGoodSettingsFile)
        if (file.exists()) file.delete()
        else file.parentFile.mkdirs()
        file.createNewFile()

        Map json = [
                gradle: [ distributionUrl: (tasks.wrapper as Wrapper).distributionUrl ],
                dependencies: [],
                minecraft: [
                        version: minecraftVersion,
                        mappings: minecraftMappings
                ]
        ]
        configurations.each { configuration -> configuration.allDependencies.each { dependency -> if (dependency.name != "unspecified") (json.dependencies as List<Map<String, String>>).add([configuration: configuration.name, group: dependency.group, name: dependency.name, version: dependency.version]) } }

        String text = new JsonBuilder(json).toPrettyString()
        file.write(text)
        logger.quiet("'$lastGoodSettingsFile':")
        logger.quiet(text)
    }
}
tasks.build.finalizedBy("saveCurrentGoodSettings")

apply from: "$rootDir${File.separator}gradle${File.separator}ext${File.separator}storeExt.gradle"
