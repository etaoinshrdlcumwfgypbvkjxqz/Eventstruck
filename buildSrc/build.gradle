//////////////////////////////////////////////////
// Gradle Build Script
//////////////////////////////////////////////////

import groovy.json.JsonSlurper

import java.nio.channels.Channels
import java.security.DigestException
import java.security.MessageDigest
import java.text.SimpleDateFormat

String rootDir = "$projectDir${File.separator}.."

apply from: "$rootDir${File.separator}gradle${File.separator}ext.properties.gradle"

ext {
    PapplyLastGoodSettings = project.hasProperty("applyLastGoodSettings") && Boolean.parseBoolean(applyLastGoodSettings as String)

    lastGoodSettingsFile = "$rootDir${File.separator}gradle${File.separator}last-good-settings.json"
    dependenciesDirectory = "$buildDir${File.separator}dependencies"

    gradleVersionsUrl = "https://services.gradle.org/versions"
    gradleLatestReleaseNightlyJsonUrl = "$gradleVersionsUrl/release-nightly"
    gradleLatestNightlyJsonUrl = "$gradleVersionsUrl/nightly"
    gradleAllJsonUrl = "$gradleVersionsUrl/all"
    gradleDependenciesDirectory = "$dependenciesDirectory${File.separator}gradle"
    gradleLatestReleaseNightlyJson = "$gradleDependenciesDirectory${File.separator}release-nightly.json"
    gradleLatestNightlyJson = "$gradleDependenciesDirectory${File.separator}nightly.json"
    gradleAllJson = "$gradleDependenciesDirectory${File.separator}all.json"

    minecraftForgeMavenMetadataXmlUrl = "https://files.minecraftforge.net/maven/net/minecraftforge/forge/maven-metadata.xml"
    minecraftForgeMavenMetadataXmlMd5Url = "${minecraftForgeMavenMetadataXmlUrl}.md5"
    minecraftForgeMavenMetadataXmlSha1Url = "${minecraftForgeMavenMetadataXmlUrl}.sha1"
    minecraftforgeDependenciesDirectory = "$dependenciesDirectory${File.separator}minecraftForge"
    minecraftForgeMavenMetadataXml = "$minecraftforgeDependenciesDirectory${File.separator}maven-metadata.xml"
    minecraftForgeMavenMetadataXmlMd5 = "${minecraftForgeMavenMetadataXml}.md5"
    minecraftForgeMavenMetadataXmlSha1 = "${minecraftForgeMavenMetadataXml}.sha1"

    gradleDistributionUrl = "https://services.gradle.org/distributions-snapshots/gradle-4.10.2-20180920083835+0000-all.zip"
    minecraftVersion = "latest"
    minecraftMappings = "latest"
}

static long download(String url, File destination) {
    destination.parentFile.mkdirs()
    return new FileOutputStream(destination).channel.transferFrom(Channels.newChannel(new URL(url).openStream()), 0, Long.MAX_VALUE)
}

void updateGradleWrapperDistributionUrl(String newDistributionUrl) {
    Wrapper wrapper = tasks.wrapper as Wrapper
    Properties properties = new Properties()
    File propertiesFile = file(wrapper.propertiesFile.absolutePath.replace("buildSrc", ""))
    properties.load(new FileInputStream(propertiesFile))
    String oldDistributionUrl = properties.distributionUrl
    if (new URL(oldDistributionUrl) != new URL(newDistributionUrl)) {
        properties.distributionUrl = newDistributionUrl
        properties.store(new FileOutputStream(propertiesFile), null)
        throw new IllegalStateException("Gradle wrapper distribution URL updated from '$oldDistributionUrl' to '$newDistributionUrl': please re-run the build with the same command to apply the changes.")
    }
}

if (PapplyLastGoodSettings) {
    logger.quiet("Applying last good settings from '$lastGoodSettingsFile'...")
    File jsonFile = file(lastGoodSettingsFile)
    if (!jsonFile.exists()) throw new FileNotFoundException("'$lastGoodSettingsFile' not found: obtain '$lastGoodSettingsFile' from the repository.")
    String jsonText = jsonFile.text
    logger.quiet("'$lastGoodSettingsFile':")
    logger.quiet(jsonText)
    Object json = new JsonSlurper().parseText(jsonText)

    updateGradleWrapperDistributionUrl(project.ext.gradleDistributionUrl = json.gradle.distributionUrl as String)
    gradle.projectsLoaded { json.dependencies.each { dependency -> dependencies.add(dependency.configuration as String, "$dependency.group:$dependency.name:$dependency.version", { force = true }) } }
    project.ext.minecraftVersion = json.minecraft.version
    project.ext.minecraftMappings = json.minecraft.mappings
} else {
    if (gradleDistributionUrl == "latest") {
        JsonSlurper jsonSlurper = new JsonSlurper()

        File gradleLatestReleaseNightlyJsonFile = file(gradleLatestReleaseNightlyJson)
        download(gradleLatestReleaseNightlyJsonUrl.toString(), gradleLatestReleaseNightlyJsonFile)
        def json = jsonSlurper.parse(gradleLatestReleaseNightlyJsonFile)

        if (json.broken as boolean) {
            File gradleLatestNightlyJsonFile = file(gradleLatestNightlyJson)
            download(gradleLatestNightlyJsonUrl.toString(), gradleLatestNightlyJsonFile)
            json = jsonSlurper.parse(gradleLatestNightlyJsonFile)

            if (json.broken as boolean) {
                File gradleAllJsonFile = file(gradleAllJson)
                download(gradleAllJsonUrl.toString(), gradleAllJsonFile)
                json = jsonSlurper.parse(gradleAllJsonFile)

                Map<String, Object> temp
                for (Map<String, Object> gradleDistributionJson : json as List<Map<String, Object>>) {
                    if (!gradleDistributionJson.broken as boolean) {
                        temp = gradleDistributionJson
                        break
                    }
                }
                if (temp != null) json = temp
                else throw new FileNotFoundException("Cannot find a working Gradle distribution from '$gradleAllJsonUrl'!")
            }
        }
        updateGradleWrapperDistributionUrl(project.ext.gradleDistributionUrl = (json.downloadUrl as String).replace("bin", "all"))
    } else updateGradleWrapperDistributionUrl(gradleDistributionUrl)

    if (minecraftVersion == "latest") {
        File minecraftForgeMavenMetadataXmlFile = file(minecraftForgeMavenMetadataXml)
        download(minecraftForgeMavenMetadataXmlUrl.toString(), minecraftForgeMavenMetadataXmlFile)
        File minecraftForgeMavenMetadataXmlMd5File = file(minecraftForgeMavenMetadataXmlMd5)
        download(minecraftForgeMavenMetadataXmlMd5Url.toString(), minecraftForgeMavenMetadataXmlMd5File)
        File minecraftForgeMavenMetadataXmlSha1File = file(minecraftForgeMavenMetadataXmlSha1)
        download(minecraftForgeMavenMetadataXmlSha1Url.toString(), minecraftForgeMavenMetadataXmlSha1File)

        String md5 = MessageDigest.getInstance("MD5").digest(minecraftForgeMavenMetadataXmlFile.bytes).encodeHex().toString()
        String expectedMd5 = minecraftForgeMavenMetadataXmlMd5File.text.trim()
        if (!expectedMd5.equalsIgnoreCase(md5)) throw new DigestException("'$minecraftForgeMavenMetadataXmlUrl' MD5 is '$md5', which is different from MD5 '$expectedMd5' from '$minecraftForgeMavenMetadataXmlMd5Url'.")

        String sha1 = MessageDigest.getInstance("SHA-1").digest(minecraftForgeMavenMetadataXmlFile.bytes).encodeHex().toString()
        String expectedSha1 = minecraftForgeMavenMetadataXmlSha1File.text.trim()
        if (!expectedSha1.equalsIgnoreCase(sha1)) throw new DigestException("'$minecraftForgeMavenMetadataXmlUrl' SHA-1 is '$sha1', which is different from SHA-1 '$expectedSha1' from '$minecraftForgeMavenMetadataXmlSha1Url'.")

        project.ext.minecraftVersion = new XmlSlurper().parse(minecraftForgeMavenMetadataXmlFile).versioning.release as String
    }

    if (minecraftMappings == "latest") project.ext.minecraftMappings = "snapshot_" + new SimpleDateFormat("yyyyMMdd").format(Calendar.instance.time.previous())
}

storeExt()
