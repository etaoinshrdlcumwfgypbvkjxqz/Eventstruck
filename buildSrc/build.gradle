//////////////////////////////////////////////////
// Gradle Build Script
//////////////////////////////////////////////////

import groovy.json.JsonSlurper
import groovy.util.slurpersupport.GPathResult

import java.nio.channels.Channels
import java.security.DigestException
import java.security.MessageDigest
import java.text.SimpleDateFormat

String rootDir = "$projectDir${File.separator}.."

apply from: "$rootDir${File.separator}gradle${File.separator}io${File.separator}properties${File.separator}properties.gradle"
apply from: "$rootDir${File.separator}gradle${File.separator}io${File.separator}properties${File.separator}ext.properties.gradle"

(loadProperties("$rootDir${File.separator}gradle.properties").findAll { key, value -> key.contains "org.gradle.project."}).each { key, value -> project.ext."${key.replace "org.gradle.project.", ""}" = value}
ext {
    applyLastGoodSettings = project.hasProperty("applyLastGoodSettings") && applyLastGoodSettings.toBoolean()

    lastGoodSettingsFile = "$rootDir${File.separator}gradle${File.separator}last-good-settings.json"
    dependenciesDirectory = "$buildDir${File.separator}dependencies"

    gradleVersionsUrl = "https://services.gradle.org/versions"
    gradleLatestReleaseNightlyJsonUrl = "$gradleVersionsUrl/release-nightly"
    gradleLatestNightlyJsonUrl = "$gradleVersionsUrl/nightly"
    gradleAllJsonUrl = "$gradleVersionsUrl/all"
    gradleDependenciesDirectory = "$dependenciesDirectory${File.separator}gradle"
    gradleLatestReleaseNightlyJsonPath = "$gradleDependenciesDirectory${File.separator}release-nightly.json"
    gradleLatestNightlyJsonPath = "$gradleDependenciesDirectory${File.separator}nightly.json"
    gradleAllJsonPath = "$gradleDependenciesDirectory${File.separator}all.json"

    minecraftForgeMavenMetadataXmlUrl = "https://files.minecraftforge.net/maven/net/minecraftforge/forge/maven-metadata.xml"
    minecraftForgeDependenciesDirectory = "$dependenciesDirectory${File.separator}minecraftForge"
    minecraftForgeMavenMetadataXmlPath = "$minecraftForgeDependenciesDirectory${File.separator}maven-metadata.xml"

    junitJupiterMavenMetadataXmlUrl = "https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/maven-metadata.xml"
    junitJupiterDependenciesDirectory = "$dependenciesDirectory${File.separator}junit-jupiter"
    junitJupiterMavenMetadataXmlPath = "$junitJupiterDependenciesDirectory${File.separator}maven-metadata.xml"
}

static long download(String url, File destination) {
    destination.parentFile.mkdirs()
    FileOutputStream fos = new FileOutputStream(destination)
    long ret = 0
    try { ret = fos.channel.transferFrom(Channels.newChannel(new URL(url).openStream()), 0, Long.MAX_VALUE) } finally { fos.close() }
    return ret
}
void checkMavenMetadata(String metadataUrl, File metadataFile, String properAlgorithmName, String algorithmName) {
    File file = file "$metadataFile.absolutePath.$algorithmName"
    String url = "$metadataUrl.$algorithmName"
    download url, file
    String ret = MessageDigest.getInstance(properAlgorithmName).digest(metadataFile.bytes).encodeHex().toString()
    String expected = file.text.trim()
    if (!expected.equalsIgnoreCase(ret)) throw new DigestException("\'$metadataUrl\' $properAlgorithmName is '$ret', which is different from $properAlgorithmName '$expected' from '$url'.")
}
String getLatestVersionMaven(String metadataUrl, String metadataPath) {
    File metadataFile = file metadataPath
    download metadataUrl, metadataFile

    checkMavenMetadata metadataUrl, metadataFile, "MD5", "md5"
    checkMavenMetadata metadataUrl, metadataFile, "SHA-1", "sha1"

    GPathResult ret = new XmlSlurper().parse metadataFile
    return ret.versioning.hasProperty("latest") ? ret.versioning.latest : ret.versioning.release
}
void updateGradleWrapperDistributionUrl(String newDistributionUrl) {
    Wrapper wrapper = tasks.wrapper as Wrapper
    Properties properties = new Properties()
    File propertiesFile = file wrapper.propertiesFile.absolutePath.replace("buildSrc", "")
    FileInputStream fis = new FileInputStream(propertiesFile)
    try { properties.load fis } finally { fis.close() }
    String oldDistributionUrl = properties.distributionUrl
    newDistributionUrl = newDistributionUrl.replace Wrapper.DistributionType.BIN.name().toLowerCase(Locale.ROOT), Wrapper.DistributionType.ALL.name().toLowerCase(Locale.ROOT)
    URL newDistribution = new URL(newDistributionUrl)
    HttpURLConnection huc = newDistribution.openConnection() as HttpURLConnection
    huc.requestMethod = "HEAD"
    if (huc.responseCode != HttpURLConnection.HTTP_OK) throw new FileNotFoundException("\'$newDistributionUrl\' returns \'$huc.responseCode\' instead of \'$HttpURLConnection.HTTP_OK\'.")
    if (new URL(oldDistributionUrl) != newDistribution) {
        properties.distributionUrl = newDistributionUrl
        FileOutputStream fos = new FileOutputStream(propertiesFile)
        try { properties.store fos, null } finally { fos.close() }
        throw new IllegalStateException("Gradle wrapper distribution URL updated from \'$oldDistributionUrl\' to \'$newDistributionUrl\'. Re-run the build with the same command to apply the changes.")
    }
}

if (applyLastGoodSettings) {
    logger.lifecycle "Applying last good settings from \'$lastGoodSettingsFile\'..."
    File jsonFile = file lastGoodSettingsFile
    if (!jsonFile.exists()) throw new FileNotFoundException("'$lastGoodSettingsFile' not found: obtain '$lastGoodSettingsFile' from the repository.")
    String jsonText = jsonFile.text
    logger.info "\'$lastGoodSettingsFile\':"
    logger.info jsonText
    Object json = new JsonSlurper().parseText jsonText

    updateGradleWrapperDistributionUrl project.ext.gradleDistributionUrl = json.gradle.distributionUrl as String
    gradle.projectsLoaded { json.dependencies.each { dependency -> dependencies.add dependency.configuration as String, "$dependency.group:$dependency.name:$dependency.version", { force = true } } }
    project.ext.minecraftForgeVersion = json.minecraft.version
    project.ext.minecraftMappings = json.minecraft.mappings
} else {
    if (gradleDistributionUrl == "latest") {
        JsonSlurper jsonSlurper = new JsonSlurper()

        File gradleLatestReleaseNightlyJsonFile = file gradleLatestReleaseNightlyJsonPath
        download gradleLatestReleaseNightlyJsonUrl.toString(), gradleLatestReleaseNightlyJsonFile
        def json = jsonSlurper.parse gradleLatestReleaseNightlyJsonFile

        if (json.broken as boolean) {
            File gradleLatestNightlyJsonFile = file gradleLatestNightlyJsonPath
            download gradleLatestNightlyJsonUrl.toString(), gradleLatestNightlyJsonFile
            json = jsonSlurper.parse gradleLatestNightlyJsonFile

            if (json.broken as boolean) {
                File gradleAllJsonFile = file gradleAllJsonPath
                download gradleAllJsonUrl.toString(), gradleAllJsonFile
                json = jsonSlurper.parse gradleAllJsonFile

                Map<String, Object> temp
                for (Map<String, Object> gradleDistributionJson : json as List<Map<String, Object>>) {
                    if (!gradleDistributionJson.broken as boolean) {
                        temp = gradleDistributionJson
                        break
                    }
                }
                if (temp != null) json = temp
                else throw new FileNotFoundException("Cannot find a working Gradle distribution from \'$gradleAllJsonUrl\'.")
            }
        }
        updateGradleWrapperDistributionUrl project.ext.gradleDistributionUrl = (json.downloadUrl as String).replace("bin", "all")
    } else updateGradleWrapperDistributionUrl gradleDistributionUrl.toString()

    if (minecraftForgeVersion == "latest") project.ext.minecraftForgeVersion = getLatestVersionMaven minecraftForgeMavenMetadataXmlUrl.toString(), minecraftForgeMavenMetadataXmlPath.toString()
    if (minecraftMappings == "latest") project.ext.minecraftMappings = "snapshot_" + new SimpleDateFormat("yyyyMMdd").format(Calendar.instance.time.previous())
}

storeExt()
