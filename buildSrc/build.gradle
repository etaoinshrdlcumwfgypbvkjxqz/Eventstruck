//////////////////////////////////////////////////
// TITLE Gradle Build Script
//////////////////////////////////////////////////

import groovy.json.JsonSlurper
import org.gradle.util.VersionNumber

import java.security.DigestException
import java.security.MessageDigest
import java.text.SimpleDateFormat

import static java.io.File.separator


/* SECTION variables */

final String rootDir = "$projectDir${separator}.."


/* SECTION extra variables */

ext {
    ext.rootDir = rootDir
    utilitiesDir = "$rootDir${separator}gradle${separator}utilities"
}


/* SECTION application */

apply from: "$utilitiesDir${separator}miscellaneous.gradle"
apply from: "$utilitiesDir${separator}globals.gradle"
apply from: "$utilitiesDir${separator}io${separator}io.gradle"
apply from: "$utilitiesDir${separator}io${separator}properties${separator}properties.gradle"
apply from: "$utilitiesDir${separator}io${separator}properties${separator}ext.properties.gradle"


/* SECTION extra variables */

loadExt "$rootDir${separator}module.properties"

//noinspection SpellCheckingInspection
ext {
    // COMMENT Gradle

    gradleVersionsUrl = 'https://services.gradle.org/versions'
    gradleLatestReleaseNightlyJsonUrl = "$gradleVersionsUrl/release-nightly".toString()
    gradleLatestNightlyJsonUrl = "$gradleVersionsUrl/nightly".toString()
    gradleAllJsonUrl = "$gradleVersionsUrl/all".toString()

    gradleDependenciesDirectory = "$repositoryDirectory${separator}org${separator}gradle${separator}gradle".toString()
    gradleLatestReleaseNightlyJsonPath = "$gradleDependenciesDirectory${separator}release-nightly.json".toString()
    gradleLatestNightlyJsonPath = "$gradleDependenciesDirectory${separator}nightly.json".toString()
    gradleAllJsonPath = "$gradleDependenciesDirectory${separator}all.json".toString()


    // COMMENT Minecraft Forge

    minecraftForgeMavenMetadataXmlUrl = 'https://files.minecraftforge.net/maven/net/minecraftforge/forge/maven-metadata.xml'

    minecraftForgeDependenciesDirectory = "$repositoryDirectory${separator}net${separator}minecraftforge${separator}forge".toString()
    minecraftForgeMavenMetadataXmlPath = "$minecraftForgeDependenciesDirectory${separator}maven-metadata.xml".toString()
}


/* SECTION methods */

boolean checkMavenMetadata(String metadataUrl, File metadataFile, String properAlgorithmName, String algorithmName) {
    File file = file "$metadataFile.absolutePath.$algorithmName"
    String url = "$metadataUrl.$algorithmName"
    try {
        download url, file
    } catch (FileNotFoundException e) {
        logger.log LogLevel.WARN, '{} file "{}" for "{}" NOT found', properAlgorithmName, url, metadataUrl
        if (strictDigestCheck) throw e
        else e.printStackTrace()
        return true
    }
    String digest = MessageDigest.getInstance(properAlgorithmName).digest(metadataFile.bytes).encodeHex().toString()
    String expected = file.text.trim()
    if (expected.equalsIgnoreCase(digest)) return true
    else {
        if (strictDigestCheck) throw new DigestException("'$metadataUrl' $properAlgorithmName is '$digest', which is different from $properAlgorithmName '$expected' from '$url'")
        else logger.log LogLevel.WARN, '"{}" {} is "{}", which is different from {} "{}" from "{}"', metadataUrl, properAlgorithmName, digest, properAlgorithmName, expected, url
        return false
    }
}

String getLatestVersionMaven(String metadataUrl, String metadataPath, String filter) {
    File metadataFile = file metadataPath
    download metadataUrl, metadataFile

    checkMavenMetadata metadataUrl, metadataFile, 'MD5', 'md5'
    checkMavenMetadata metadataUrl, metadataFile, 'SHA-1', 'sha1'

    //noinspection GrUnresolvedAccess
    List<String> versions = new XmlSlurper().parse(metadataFile).versioning.versions.children().list().collect { it.text() }
    List<VersionNumber> filtered = versions.findAll { it.contains(filter) }.collect { VersionNumber.parse(it as String) }.sort()
    return filtered.empty ? versions.collect { VersionNumber.parse(it as String) }.sort().last() : filtered.last()
}

void updateGradleWrapperDistributionUrl(String newDistributionUrl) {
    Wrapper wrapper = tasks.wrapper as Wrapper
    Properties properties = new Properties()
    File propertiesFile = file wrapper.propertiesFile.absolutePath.replace('buildSrc', '')
    FileInputStream fis = new FileInputStream(propertiesFile)
    try {
        properties.load fis
    } finally {
        fis.close()
    }
    String oldDistributionUrl = properties.distributionUrl
    newDistributionUrl = newDistributionUrl.replace Wrapper.DistributionType.BIN.name().toLowerCase(Locale.ROOT), Wrapper.DistributionType.ALL.name().toLowerCase(Locale.ROOT)
    URL newDistribution = new URL(newDistributionUrl)
    HttpURLConnection huc = newDistribution.openConnection() as HttpURLConnection
    huc.requestMethod = 'HEAD'
    if (huc.responseCode != HttpURLConnection.HTTP_OK) throw new FileNotFoundException("'$newDistributionUrl' returns '$huc.responseCode' instead of '$HttpURLConnection.HTTP_OK'")
    if (new URL(oldDistributionUrl) != newDistribution) {
        properties.distributionUrl = newDistributionUrl
        FileOutputStream fos = new FileOutputStream(propertiesFile)
        try {
            properties.store fos, null
        } finally {
            fos.close()
        }
        throw new IllegalStateException("Gradle wrapper distribution URL updated from '$oldDistributionUrl' to '$newDistributionUrl', re-run the build to apply the changes")
    }
}

String readLastGoodSettings() throws FileNotFoundException {
    File jsonFile = file lastGoodSettingsPath
    if (!jsonFile.exists()) throw new FileNotFoundException("'$lastGoodSettingsPath' NOT found, obtain it from the repository")
    jsonFile.text
}

Object parseLastGoodSettings(boolean print) throws FileNotFoundException {
    String jsonText = readLastGoodSettings()
    if (print) logger.info '{}:{}{}', convertToCanonicalPath(lastGoodSettingsPath), System.lineSeparator(), jsonText
    return new JsonSlurper().parseText(jsonText)
}


/* SECTION configuration */

if (!update) {
    logger.lifecycle 'Applying last good settings from "{}"...', convertToCanonicalPath(lastGoodSettingsPath) as String
    Object json = parseLastGoodSettings true

    //noinspection GrUnresolvedAccess
    updateGradleWrapperDistributionUrl ext.gradleDistributionUrl = json.gradle.distributionUrl as String

    //noinspection GrUnresolvedAccess
    ext.minecraftForgeVersion = json.minecraft.version
    //noinspection GrUnresolvedAccess
    ext.minecraftMappings = json.minecraft.mappings

    ext.lastGoodSettingsJson = readLastGoodSettings()
}
if (update) {
    if (gradleDistributionUrl == 'latest') {
        //noinspection SpellCheckingInspection
        JsonSlurper jsonSlurper = new JsonSlurper()

        File gradleLatestReleaseNightlyJsonFile = file gradleLatestReleaseNightlyJsonPath
        download gradleLatestReleaseNightlyJsonUrl.toString(), gradleLatestReleaseNightlyJsonFile
        Object jsonGradle = jsonSlurper.parse gradleLatestReleaseNightlyJsonFile

        if (jsonGradle.broken) {
            File gradleLatestNightlyJsonFile = file gradleLatestNightlyJsonPath
            download gradleLatestNightlyJsonUrl.toString(), gradleLatestNightlyJsonFile
            jsonGradle = jsonSlurper.parse gradleLatestNightlyJsonFile

            if (jsonGradle.broken) {
                File gradleAllJsonFile = file gradleAllJsonPath
                download gradleAllJsonUrl.toString(), gradleAllJsonFile
                jsonGradle = jsonSlurper.parse gradleAllJsonFile

                Map<String, Object> temp
                for (Map<String, Object> gradleDistributionJson : jsonGradle as List<Map<String, Object>>) {
                    if (!gradleDistributionJson.broken) {
                        temp = gradleDistributionJson
                        break
                    }
                }
                if (temp != null) jsonGradle = temp
                else throw new FileNotFoundException("Cannot find a working Gradle distribution from '$gradleAllJsonUrl'")
            }
        }
        //noinspection GrUnresolvedAccess
        updateGradleWrapperDistributionUrl ext.gradleDistributionUrl = (jsonGradle.downloadUrl as String).replace('bin', 'all')
    } else updateGradleWrapperDistributionUrl gradleDistributionUrl.toString()

    //noinspection GrUnresolvedAccess
    project.ext.minecraftForgeVersion = getLatestVersionMaven minecraftForgeMavenMetadataXmlUrl.toString(), minecraftForgeMavenMetadataXmlPath.toString(), minecraftForgeVersion

    if (minecraftMappings == 'latest') {
        //noinspection SpellCheckingInspection
        SimpleDateFormat sdf = new SimpleDateFormat('yyyyMMdd')
        //noinspection GrUnresolvedAccess
        project.ext.minecraftMappings = "snapshot_${sdf.format(Calendar.instance.time.previous())}"
    }
}

storeExt "$projectDir${separator}ext-ra.properties", { ['gradleDistributionUrl', 'minecraftForgeVersion', 'minecraftMappings', 'minecraftForgeVersion', 'minecraftMappings', 'lastGoodSettingsJson'].contains it.key }
storeExt()
