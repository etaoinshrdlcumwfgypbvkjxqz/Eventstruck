//////////////////////////////////////////////////
// TITLE Gradle Build Script
//////////////////////////////////////////////////

import static java.io.File.separator

final String rootDir = "$projectDir${separator}.."

ext {
	ext.rootDir = rootDir
	utilitiesDir = "$rootDir${separator}gradle${separator}utilities".toString()
}

apply from: "$utilitiesDir${separator}io${separator}io.gradle"
apply from: "$utilitiesDir${separator}io${separator}properties${separator}properties.gradle"
apply from: "$utilitiesDir${separator}io${separator}properties${separator}ext.properties.gradle"

loadExt.call "$rootDir${separator}module.properties"

void updateGradleWrapperDistributionUrl(String newDistributionUrl) {
	Wrapper wrapper = tasks.wrapper // COMMENT cannot use Provider
	Properties properties = new Properties()
	File propertiesFile = file wrapper.propertiesFile.absolutePath.replace('buildSrc', '')
	FileInputStream fis = new FileInputStream(propertiesFile)
	try {
		properties.load fis
	} finally {
		fis.close()
	}
	String oldDistributionUrl = properties.distributionUrl
	URL newDistribution = new URL(newDistributionUrl)
	if (newDistribution != new URL(oldDistributionUrl)) {
		{ ->
			HttpURLConnection huc = newDistribution.openConnection() as HttpURLConnection
			huc.requestMethod = 'HEAD'
			if (huc.responseCode != HttpURLConnection.HTTP_OK) throw new FileNotFoundException("'$newDistributionUrl' returns '$huc.responseCode' instead of '$HttpURLConnection.HTTP_OK'")
		}.call()
		properties.distributionUrl = newDistributionUrl
		FileOutputStream fos = new FileOutputStream(propertiesFile)
		try {
			properties.store fos, ' suppress inspection "UnusedProperty" for whole file'
		} finally {
			fos.close()
		}
		throw new IllegalStateException("Gradle wrapper distribution URL updated from '$oldDistributionUrl' to '$newDistributionUrl', re-run the build to apply the changes")
	}
}

updateGradleWrapperDistributionUrl gradleDistributionUrl

storeExt.call()
