//////////////////////////////////////////////////
// TITLE Application
//////////////////////////////////////////////////

import groovy.io.FileType

CharSequence methodMapName = 'methodMap'
boolean hasMethodMap
for (int i = 0; (hasMethodMap = rootProject.ext.has methodMapName) && !(rootProject.ext."$methodMapName" instanceof Map<?, ?>); ++i) methodMapName = "methodMap$i"

Map<String, File> methodMap
if (hasMethodMap)
	methodMap = rootProject.ext."$methodMapName"
else {
	methodMap = [:]
	file(utilitiesDir).eachFileRecurse(FileType.FILES) {
		if (!it.name.endsWith('.gradle')) return
		it.text.findAll(~/project\.ext\.([^ ]+) = \{/) { s, CharSequence m ->
			File p
			if ((p = methodMap.put(m.toString(), it)) != null) throw new IllegalStateException("Repeated utiliy function: '$m' in both '$p.canonicalPath' and '$it.canonicalPath'")
			false
		}
	}
	rootProject.ext."$methodMapName" = methodMap
}

project.ext.checkApply = { Iterable<? extends CharSequence> functions ->
	functions.collect { it.toString() }.each {
		File f = methodMap.computeIfAbsent it, { throw new IllegalArgumentException("No such utility method: $it") }
		if (!project.ext.has(it)) throw new IllegalStateException("'$f.canonicalPath' is not applied")
	}
}
