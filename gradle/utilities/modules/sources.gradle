//////////////////////////////////////////////////
// TITLE Source
//////////////////////////////////////////////////

import groovy.io.FileType

import static java.io.File.separator

apply from: "$utilitiesDir${separator}meta${separator}application.gradle"
checkApply.call(['evaluateGStringString', 'createNewFile'])

project.ext.makeSourcesTasks = { Closure c ->
	tasks.withType(AbstractCompile) { AbstractCompile t ->
		// COMMENT Avoid messing around internal tasks.
		if (name.contains('_')) return

		String taskSourceSetName = name.replace('compile', ''),
		       sourceSetName = taskSourceSetName.uncapitalize()
		sourceSetName = sourceSets.find { sourceSetName.startsWith it.name }?.name
		String language = name.replace "compile", ''
		if (sourceSetName == null) sourceSetName = 'main'
		else language = language.replace sourceSetName.capitalize(), ''

		Set<File> sourceSet = sourceSets."$sourceSetName"."${language.uncapitalize()}".srcDirs

		Sync pre = task("preProcess${name.capitalize()}", type: Sync, description: "Prepare sources for processing $sourceSetName $language.") {
			from sourceSet
			into temporaryDir

			doLast {
				destinationDir.eachFileRecurse(FileType.FILES) {
					it.setWritable true, false
					// COMMENT standard
					it.text = it.text.replace('\\', '\\\\').replaceAll(~/\$(.*?)__/) { "\${${it[1]}}" }.replaceAll ~/\$(?!\{)/, '\\\\\\$'
				}
			}
		} as Sync

		Sync process = task("process${name.capitalize()}", type: Sync, description: "Process $sourceSetName $language.", dependsOn: pre) {
			configure c

			into temporaryDir
			from(pre.temporaryDir) {
				if (buildType == 'DEBUG') inputs.property 'expand_group', '$group__'
				Map<String, Object> e = inputs.properties
						.findAll { it.key.startsWith 'expand_' }
						.collectEntries {
							String k = it.key.replace('expand_', '')
							[(k): it.value, ("${k}__".toString()): it.value]
						} as Map<String, Object>

				expand e

				Binding eb = new Binding(e)
				eachFile {
					String parent = evaluateGStringString.call(it.relativePath.parent.pathString, eb).replace '.', separator
					it.path = "$parent$separator${evaluateGStringString.call it.name, eb}"
				}
			}
		} as Sync
		t.dependsOn process

		afterEvaluate {
			t.dependsOn.each {
				if (it != process)
					pre.mustRunAfter it
			}
		}

		t.source = process.destinationDir

		t.finalizedBy task("postProcess${name.capitalize()}", type: Jar, description: "Finalize after processing $sourceSetName $language.") {
			from process.destinationDir
			classifier "$sourceSetName$language"
			destinationDir = file "$buildDir${separator}replaced"

			if (createNewFile.call(archivePath)) {
				archivePath.setWritable true, false
				archivePath.text = 'PK\u0005\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000'
			}
			gradle.projectsEvaluated { rootProject.dependencies.replaced files(archivePath) }
		}

		tasks.withType(Javadoc) { Javadoc t2 ->
			boolean replaced = false
			t2.source = t2.source.findAll {
				boolean r = false
				String p = it.canonicalPath
				sourceSet.each {
					if (r) return
					r = p.contains(it.canonicalPath)
				}
				replaced |= r
				!r
			}
			if (replaced) t2.source process.destinationDir
		}
	}
}

// COMMENT append
afterEvaluate {
	tasks.withType(AbstractCompile) {
		options.fork = false
		options.compilerArgs << '-Xlint'

		if (buildType == 'DEBUG')
			options.verbose = true
	}
}
