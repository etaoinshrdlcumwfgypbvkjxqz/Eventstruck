//////////////////////////////////////////////////
// TITLE Source
//////////////////////////////////////////////////

import groovy.io.FileType

import static java.io.File.separator

apply from: "$utilitiesDir${separator}meta${separator}application.gradle"
checkApply.call(['evaluateGStringString', 'createNewFile'])

project.ext.makeSourcesTasks = { Closure c ->
	afterEvaluate {
		tasks.names.findAll { it.startsWith 'compile' }.each { String taskName ->
			// COMMENT Avoid messing around internal tasks.
			if (taskName.contains('_')) return

			def task = tasks.named taskName
			String taskSourceSetName = taskName.replace('compile', ''),
			       sourceSetName = taskSourceSetName.uncapitalize()
			sourceSetName = sourceSets.find { sourceSetName.startsWith it.name }?.name
			String language = taskName.replace "compile", ''
			if (sourceSetName == null)
				sourceSetName = 'main'
			else
				language = language.replace sourceSetName.capitalize(), ''

			Set<File> sourceSet = sourceSets."$sourceSetName"."${language.uncapitalize()}".srcDirs

			def pre = tasks.register("preProcess${taskName.capitalize()}", Sync) {
				group task.get().group
				description "Prepare sources for processing $sourceSetName $language."

				from sourceSet
				into temporaryDir

				doLast {
					destinationDir.eachFileRecurse(FileType.FILES) {
						it.setWritable true, false
						// COMMENT standard
						it.text = it.text.replace('\\', '\\\\').replaceAll(~/\$(.*?)__/) { "\${${it[1]}}" }.replaceAll ~/\$(?!\{)/, '\\\\\\$'
					}
				}
			}

			def process = tasks.register("process${taskName.capitalize()}", Sync) {
				group task.get().group
				description "Process $sourceSetName $language."
				dependsOn pre

				configure c

				into temporaryDir
				from(pre.get().temporaryDir) {
					if (buildType == 'DEBUG') inputs.property 'expand_group', '$group__'
					Map<String, Object> e = inputs.properties
							.findAll { it.key.startsWith 'expand_' }
							.collectEntries {
								String k = it.key.replace('expand_', '')
								[(k): it.value, ("${k}__".toString()): it.value]
							} as Map<String, Object>

					expand e

					Binding eb = new Binding(e)
					eachFile {
						String parent = evaluateGStringString.call(it.relativePath.parent.pathString, eb).replace '.', separator
						it.path = "$parent$separator${evaluateGStringString.call it.name, eb}"
					}
				}

				task.get().source = destinationDir
			}

			def post = tasks.register("postProcess${taskName.capitalize()}", Jar) {
				group task.get().group
				description "Finalize after processing $sourceSetName $language."

				from process.get().destinationDir
				classifier "$sourceSetName$language"
				destinationDir = file "$buildDir${separator}replaced"

				if (createNewFile.call(archivePath)) {
					archivePath.setWritable true, false
					archivePath.text = 'PK\u0005\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000'
				}
				rootProject.dependencies.replaced files(archivePath)
			}

			pre.configure { mustRunAfter task.get().dependsOn.findAll { it != process } }
			task.configure {
				dependsOn process
				finalizedBy post
			}

			tasks.withType(Javadoc).configureEach { Javadoc javadoc ->
				boolean replaced = false
				javadoc.source = javadoc.source.findAll {
					boolean r = false
					String p = it.canonicalPath
					r = sourceSet.any { p.contains it.canonicalPath }
					replaced |= r
					!r
				}
				if (replaced)
					javadoc.source process.get().destinationDir
			}
		}
	}
}

// COMMENT append
afterEvaluate {
	tasks.withType(AbstractCompile).configureEach {
		options.fork = false
		options.compilerArgs << '-Xlint'

		if (buildType == 'DEBUG')
			options.verbose = true
	}
}
