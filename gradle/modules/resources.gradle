//////////////////////////////////////////////////
// TITLE Resources
//////////////////////////////////////////////////

import static java.io.File.separator

apply from: "$utilitiesDir${separator}meta${separator}application.gradle"
checkApply.call(['evaluateGStringString'])

project.ext.makeResourcesTasks = { Closure c ->
	tasks.withType(ProcessResources).configureEach { ProcessResources t ->
		// COMMENT Avoid messing around internal tasks.
		if (name.contains('_')) return

		String taskSourceSetName = name.replace('process', '').replace('Resources', ''),
		       sourceSetName = (taskSourceSetName.empty ? 'main' : taskSourceSetName).uncapitalize()

		t.configure {
			configure c

			if (buildType == 'DEBUG') inputs.property 'expand_group', '$group__'
			Map<String, Object> e = inputs.properties
					.findAll { it.key.startsWith 'expand_' }
					.collectEntries { [(it.key.replace('expand_', '')): it.value] } as Map<String, Object>

			// COMMENT replace stuff in the to-be-processed files, nothing else
			rename ~/(.*)\.in(.*)/, '$1$2'
			from(sourceSets."$sourceSetName".resources.srcDirs) {
				include '**/*.in*'

				// COMMENT replace variables
				expand e
			}

			// COMMENT copy everything else except the processed files
			from(sourceSets."$sourceSetName".resources.srcDirs) { exclude '**/*.in*' }

			Binding eb = new Binding(e)
			eachFile { it.path = evaluateGStringString.call it.path, eb }

			doLast {
				List<File> markedForDeletion = []
				destinationDir.eachDirRecurse { if (it.directorySize() == 0) markedForDeletion << it }
				markedForDeletion.each { it.deleteDir() }
			}
		}

		tasks.named("compile${taskSourceSetName}Java").configure {
			finalizedBy t // COMMENT fix resources not processed
		}
	}
}
